from collections.abc import Sequence

import pytest

from gempyor.compartments import NestedIterableOfStr, _format_deep_nested_iterables


@pytest.mark.parametrize(
    ("x", "sep", "expected"),
    (
        (["a", "b", "c"], "_", ["a", "b", "c"]),
        ([["a", "b"], "c", ["d", "e", "f"]], "-", ["a-b", "c", "d-e-f"]),
        ([["a", ["b", "c"]], ["d", ["e"], "f"]], "#", ["a#['b', 'c']", "d#['e']#f"]),
        ("abc", "*", ["a", "b", "c"]),
        ([["a", "b", ["c", "d"]]], ["_", "*"], ["a_b_c*d"]),
        (
            [[["a", "b"], ["c", "d"]], [["e", "f"], ["g", "h"]]],
            ["%", "#"],
            ["a#b%c#d", "e#f%g#h"],
        ),
        (
            [["a", ["b", ["c"]]], ["d", "e", ["f", "g"]]],
            ("!", "~"),
            ["a!b~['c']", "d!e!f~g"],
        ),
        ((("a", ("b", ("c", ("d")))),), ("*", "_", "+"), ["a*b_c+d"]),
        (
            [["a", ["b", ["c", ["d", ["e", "f"]]]]]],
            ["?", "&", "@"],
            ["a?b&c@['d', ['e', 'f']]"],
        ),
        # Cases from `Compartments.format_proportional_to`
        (["123"], ("*", "_", "+"), ["1*2*3"]),
        ([["123", "45"]], ("*", "_", "+"), ["1_2_3*4_5"]),
        (["1"], ("*", "_", "+"), ["1"]),
        ([["1"], ["2"]], ("*", "_", "+"), ["1", "2"]),
        ([["1", "3"], ["2"]], ("*", "_", "+"), ["1*3", "2"]),
        ([[["1", "3"]], ["2"]], ("*", "_", "+"), ["1_3", "2"]),
        (
            [[["1", "2"], ["3", "4"]], ["5", ["6", "7"]]],
            ("*", "_", "+"),
            ["1_2*3_4", "5*6_7"],
        ),
        (
            [[["1", ["2", "3"]], "4", ["5", ["6", "7"]]]],
            ("*", "_", "+"),
            ["1_2+3*4*5_6+7"],
        ),
        (["1", ["2", ["3", ["4", ["5"]]]]], ("*", "_", "+"), ["1", "2*3_4+['5']"]),
        ("1", ("*", "_", "+"), ["1"]),
    ),
)
def test_output_validation(
    x: NestedIterableOfStr, sep: str | Sequence[str], expected: list[str]
) -> None:
    assert _format_deep_nested_iterables(x, sep) == expected
