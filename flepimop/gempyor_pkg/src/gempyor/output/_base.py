"""ABC For model outputs."""

__all__: tuple[str, ...] = ()


from abc import ABC, abstractmethod
from pathlib import Path

import yaml

from ._types import Chains


class OutputABC(ABC):
    """Base class for model outputs."""

    def __init__(
        self,
        config: Path | str,
        run_id: str,
        seir_modifiers_scenario: str | None = None,
        outcome_modifers_scenario: str | None = None,
        path_prefix: Path | str | None = None,
    ) -> None:
        """
        Initialize the OutputABC.

        Args:
            config: Path to the config file used to generate the outputs.
            run_id: Run ID of the model, typically generated by the command to produce
                the outputs.
            seir_modifiers_scenario: Name of the 'seir_modifiers' scenario to process or
                `None` to not consider a scenario.
            outcome_modifers_scenario: Name of the 'outcome_modifiers' scenario to
                process or `None` to not consider a scenario.
            path_prefix: Prefix path to the model output directory. If `None`, use
                the current working directory.

        Raises:
            ValueError: If the config file does not have a 'name' key.
            FileNotFoundError: If the output path does not exist.
            NotADirectoryError: If the output path is not a directory.

        """
        # Initialize self
        self._config = Path(config)
        self._run_id = run_id
        self._seir_modifiers_scenario = seir_modifiers_scenario
        self._outcome_modifers_scenario = outcome_modifers_scenario
        self._path_prefix = Path(path_prefix) if path_prefix is not None else Path.cwd()
        # Figure out the name of the run
        with self._config.open("r") as f:
            conf = yaml.safe_load(f)
        self._name = conf.get("name")
        if self._name is None:
            msg = f"Config file {self._config} does not have a 'name' key."
            raise ValueError(msg)
        self._name = self._name.strip()
        if self._seir_modifiers_scenario is not None:
            self._name += f"_{self._seir_modifiers_scenario}"
        if self._outcome_modifers_scenario is not None:
            self._name += f"_{self._outcome_modifers_scenario}"
        # Assert the main directory exists
        path = self._path()
        if not path.exists():
            msg = f"Output path '{path}' does not exist."
            raise FileNotFoundError(msg)
        if not path.is_dir():
            msg = f"Output path '{path}' is not a directory."
            raise NotADirectoryError(msg)

    def _path(self, *args: str) -> Path:
        """Get the path to the output file."""
        path = self._path_prefix / "model_output" / self._name / self._run_id
        if args:
            path /= Path(*args)
        return path

    @abstractmethod
    def get_chains(self) -> Chains:
        """Get the model chains."""
        raise NotImplementedError
